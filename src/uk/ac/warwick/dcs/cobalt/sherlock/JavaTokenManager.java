/* Generated By:JavaCC: Do not edit this line. JavaTokenManager.java */
package uk.ac.warwick.dcs.cobalt.sherlock;
import java.io.*;
import java.util.Date;

public class JavaTokenManager implements JavaConstants
{
    public static String my_chars = "";
    public static boolean ispis_naziva_datoteke = false;
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); my_chars += curChar; }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x100L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); my_chars += curChar; }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); my_chars += curChar; }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 98;
            return -1;
         }
         if ((active1 & 0x2L) != 0L)
            return 50;
         if ((active0 & 0x78000000000L) != 0L)
         {
            jjmatchedKind = 46;
            return 146;
         }
         if ((active0 & 0x1e00000L) != 0L)
         {
            jjmatchedKind = 46;
            return 44;
         }
         if ((active0 & 0x3c400L) != 0L)
         {
            jjmatchedKind = 46;
            return 9;
         }
         if ((active0 & 0xc0000L) != 0L)
         {
            jjmatchedKind = 46;
            return 15;
         }
         if ((active1 & 0x808L) != 0L)
            return 179;
         if ((active1 & 0x410L) != 0L)
            return 174;
         if ((active1 & 0xe06000L) != 0L)
            return 73;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 46;
            return 160;
         }
         if ((active0 & 0x7000000000L) != 0L)
         {
            jjmatchedKind = 46;
            return 124;
         }
         if ((active0 & 0x80bfe000800L) != 0L)
         {
            jjmatchedKind = 46;
            return 99;
         }
         if ((active0 & 0x18L) != 0L || (active1 & 0x20100000L) != 0L)
            return 5;
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 46;
            return 32;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 46;
            return 106;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 46;
            return 39;
         }
         return -1;
      case 1:
         if ((active0 & 0x18000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 145;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 99;
         if ((active0 & 0x187ffdb7ec00L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 99;
         }
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 43;
         }
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x60000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
            return 152;
         }
         if ((active0 & 0x10L) != 0L)
            return 3;
         if ((active0 & 0x80000L) != 0L)
            return 14;
         return -1;
      case 2:
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return 144;
         }
         if ((active0 & 0x40161000000L) != 0L)
            return 99;
         if ((active0 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return 42;
         }
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1afe9cb7ec00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return 99;
         }
         return -1;
      case 3:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 41;
         }
         if ((active0 & 0x20200104800L) != 0L)
            return 99;
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x18fcdca7a400L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 99;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 143;
         }
         return -1;
      case 4:
         if ((active0 & 0x83000a1a400L) != 0L)
            return 99;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 4;
            return 99;
         }
         if ((active0 & 0x104cdc060000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
            return 99;
         }
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 183;
         return -1;
      case 5:
         if ((active0 & 0x104888000000L) != 0L)
            return 99;
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x454460000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
            return 99;
         }
         return -1;
      case 6:
         if ((active0 & 0x400440000L) != 0L)
            return 99;
         if ((active0 & 0x54020000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
            return 99;
         }
         return -1;
      case 7:
         if ((active0 & 0x54000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
            return 99;
         }
         if ((active0 & 0x20000L) != 0L)
            return 99;
         return -1;
      case 8:
         if ((active0 & 0x40000000L) != 0L)
            return 99;
         if ((active0 & 0x14000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 8;
            return 99;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 37:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 38:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 40:
         return jjStopAtPos(0, 57);
      case 41:
         return jjStopAtPos(0, 58);
      case 42:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 43:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4008000L);
      case 44:
         return jjStopAtPos(0, 64);
      case 45:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8010000L);
      case 46:
         return jjStartNfaWithStates_0(0, 65, 50);
      case 47:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x18L, 0x20000000L);
      case 58:
         return jjStopAtPos(0, 72);
      case 59:
         return jjStopAtPos(0, 63);
      case 60:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 61:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 62:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L);
      case 63:
         return jjStopAtPos(0, 71);
      case 91:
         return jjStopAtPos(0, 61);
      case 93:
         return jjStopAtPos(0, 62);
      case 94:
         return jjStartNfaWithStates_0(0, 87, 73);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3c400L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc0000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1e00000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7e000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x380000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x7000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x78000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 59);
      case 124:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 125:
         return jjStopAtPos(0, 60);
      case 126:
         return jjStopAtPos(0, 70);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 42:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 4, 3);
         break;
      case 43:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 45:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 47:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 61:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x48020c000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x900040000L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 99);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x99000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x910004L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x70000000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 14);
         return jjMoveStringLiteralDfa2_0(active0, 0x1020c00L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000002000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8c000000004L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200200000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x420400L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200c000000L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 99);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010104000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8c0008800L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 119:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 99);
         break;
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xc42000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 99);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 99);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0x102040000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0x80004000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 99);
         return jjMoveStringLiteralDfa4_0(active0, 0x10008000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000210400L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4010020000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 39);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x410000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 99);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 99);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000004L);
      case 104:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 99);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 107:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 99);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 99);
         return jjMoveStringLiteralDfa5_0(active0, 0x100848000000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 99);
         break;
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 99);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 99);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 99);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 119:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 183);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(5, 2);
         break;
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 99);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 104:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 99);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x440000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 99);
         return jjMoveStringLiteralDfa6_0(active0, 0x10020000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 99);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 99);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 99);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L);
      case 121:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 99);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 30, 99);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); my_chars += curChar;}
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 99);
         break;
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 183;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 44:
               case 99:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 152:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 174:
                  if (curChar == 60)
                     jjCheckNAdd(175);
                  if (curChar == 60)
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  break;
               case 144:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 0:
                  if (kind > 98)
                     kind = 98;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 62)
                     jjCheckNAddStates(7, 10);
                  else if (curChar == 60)
                     jjAddStates(11, 12);
                  else if (curChar == 36)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 39)
                     jjAddStates(16, 17);
                  else if (curChar == 46)
                     jjCheckNAdd(50);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddTwoStates(47, 48);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddStates(18, 20);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 106:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 39:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 41:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 179:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 181;
                  if (curChar == 62)
                     jjCheckNAdd(175);
                  if (curChar == 62)
                     jjCheckNAdd(178);
                  if (curChar == 62)
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  break;
               case 124:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 183:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 146:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 145:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 160:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 143:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 15:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 1:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 46:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(21, 23);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if (curChar == 39)
                     jjAddStates(16, 17);
                  break;
               case 56:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if (curChar == 39 && kind > 55)
                     kind = 55;
                  break;
               case 59:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 60:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 57);
                  break;
               case 61:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 62:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 63:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 64:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 15);
                  break;
               case 65:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 67:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 68:
                  if (curChar == 34 && kind > 56)
                     kind = 56;
                  break;
               case 69:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 70:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 71:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 73:
                  if (curChar == 61 && kind > 94)
                     kind = 94;
                  break;
               case 74:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if ((0x100001200L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 78:
                  if (kind > 98)
                     kind = 98;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar != 46)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(28, 30);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(28, 30);
                  break;
               case 84:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(85, 54);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddTwoStates(89, 54);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 92:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(93);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(93, 54);
                  break;
               case 94:
                  if (curChar != 48)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(18, 20);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(96, 48);
                  break;
               case 97:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(97, 48);
                  break;
               case 98:
                  if (curChar != 36)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 173:
                  if (curChar == 60)
                     jjAddStates(11, 12);
                  break;
               case 175:
                  if (curChar == 61 && kind > 96)
                     kind = 96;
                  break;
               case 176:
                  if (curChar == 60)
                     jjCheckNAdd(175);
                  break;
               case 177:
                  if (curChar == 62)
                     jjCheckNAddStates(7, 10);
                  break;
               case 178:
                  if (curChar == 62 && kind > 89)
                     kind = 89;
                  break;
               case 180:
               case 181:
                  if (curChar == 62)
                     jjCheckNAdd(175);
                  break;
               case 182:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 152:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 144:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  else if (curChar == 94)
                     jjCheckNAdd(73);
                  else if (curChar == 124)
                     jjCheckNAdd(73);
                  if ((0xf8000001ffffffffL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                  }
                  else if (curChar == 118)
                     jjAddStates(34, 35);
                  else if (curChar == 98)
                     jjAddStates(36, 37);
                  else if (curChar == 116)
                     jjAddStates(38, 39);
                  else if (curChar == 115)
                     jjAddStates(40, 42);
                  else if (curChar == 112)
                     jjAddStates(43, 45);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 9;
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 118;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 113;
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 108)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  break;
               case 124:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 140;
                  else if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 133;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 183:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 115)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 146:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 152;
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 145:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 160:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 161;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 143:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 119)
                     jjCheckNAdd(34);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 4:
                  if (kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar == 114 && kind > 12)
                     kind = 12;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 101 && kind > 12)
                     kind = 12;
                  break;
               case 12:
                  if (curChar == 108)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 16:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 103 && kind > 12)
                     kind = 12;
                  break;
               case 18:
               case 21:
                  if (curChar == 110)
                     jjCheckNAdd(17);
                  break;
               case 19:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116 && kind > 45)
                     kind = 45;
                  break;
               case 27:
                  if (curChar == 99)
                     jjCheckNAdd(26);
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 115 && kind > 45)
                     kind = 45;
                  break;
               case 35:
                  if (curChar == 100)
                     jjCheckNAdd(34);
                  break;
               case 36:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 45:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 48:
                  if ((0x100000001000L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 54:
                  if ((0x5000000050L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 58:
                  if (curChar == 92)
                     jjAddStates(48, 50);
                  break;
               case 59:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 65:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 66:
                  if (curChar == 92)
                     jjAddStates(51, 53);
                  break;
               case 67:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 75:
                  if (curChar == 124)
                     jjCheckNAdd(73);
                  break;
               case 76:
                  if (curChar == 94)
                     jjCheckNAdd(73);
                  break;
               case 78:
                  if ((0xf8000001ffffffffL & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 95:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(96, 48);
                  break;
               case 98:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 100:
                  if (curChar == 112)
                     jjAddStates(43, 45);
                  break;
               case 101:
                  if (curChar == 101 && kind > 45)
                     kind = 45;
                  break;
               case 102:
                  if (curChar == 116)
                     jjCheckNAdd(101);
                  break;
               case 103:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 107:
                  if (curChar == 100 && kind > 45)
                     kind = 45;
                  break;
               case 108:
               case 125:
                  if (curChar == 101)
                     jjCheckNAdd(107);
                  break;
               case 109:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 99 && kind > 45)
                     kind = 45;
                  break;
               case 116:
               case 121:
                  if (curChar == 105)
                     jjCheckNAdd(115);
                  break;
               case 117:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 115)
                     jjAddStates(40, 42);
                  break;
               case 122:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 126:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 112 && kind > 45)
                     kind = 45;
                  break;
               case 136:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 116)
                     jjAddStates(38, 39);
                  break;
               case 147:
                  if (curChar == 110)
                     jjCheckNAdd(26);
                  break;
               case 148:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 153:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 98)
                     jjAddStates(36, 37);
                  break;
               case 155:
                  if (curChar == 110 && kind > 12)
                     kind = 12;
                  break;
               case 156:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 161:
                  if (curChar == 116)
                     jjCheckNAdd(11);
                  break;
               case 162:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 118)
                     jjAddStates(34, 35);
                  break;
               case 164:
                  if (curChar == 100 && kind > 12)
                     kind = 12;
                  break;
               case 165:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 108)
                     jjCheckNAdd(101);
                  break;
               case 168:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 44:
               case 99:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 42:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 152:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 144:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 98)
                        kind = 98;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(99);
                  }
                  break;
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 106:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 43:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 41:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 124:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 183:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 146:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 145:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 160:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 143:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 15:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 5)
                     kind = 5;
                  break;
               case 56:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 15);
                  break;
               case 78:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 98)
                     kind = 98;
                  break;
               case 98:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(99);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 183 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); my_chars += curChar;}
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); my_chars += curChar;}
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   80, 81, 86, 87, 90, 91, 54, 178, 179, 180, 182, 174, 176, 65, 66, 68, 
   56, 58, 95, 97, 48, 50, 51, 54, 65, 66, 70, 68, 82, 83, 54, 90, 
   91, 54, 166, 172, 160, 162, 146, 153, 124, 134, 141, 106, 114, 119, 52, 53, 
   59, 60, 62, 67, 69, 71, 84, 85, 88, 89, 92, 93, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, "\43\154\151\156\145\40", "\57\57", "\57\52", null, null, null, null, 
null, "\143\157\156\163\164", "\147\157\164\157", null, "\142\162\145\141\153", 
"\143\141\163\145", "\143\141\164\143\150", "\143\154\141\163\163", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\145\154\163\145", 
"\146\141\154\163\145", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\151\146", "\151\155\160\154\145\155\145\156\164\163", "\151\155\160\157\162\164", 
"\151\156\163\164\141\156\143\145\157\146", "\151\156\164", "\151\156\164\145\162\146\141\143\145", 
"\156\141\164\151\166\145", "\156\145\167", "\156\165\154\154", "\160\141\143\153\141\147\145", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\165\160\145\162", "\163\167\151\164\143\150", 
"\164\150\151\163\56", "\164\150\162\157\167", "\164\162\165\145", "\164\162\171", 
"\167\150\151\154\145", "\141\163\163\145\162\164", null, null, null, null, null, null, null, null, 
null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", 
"\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", null, "\53\75", "\55\75", "\52\75", "\57\75", 
null, "\45\75", null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "inSingleLineComment", 
   "inAnyMultiLineComment", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, 1, 2, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffa27ffffffffc3fL, 0x5ffffffffL, 
};
static final long[] jjtoSkip = {
   0x3c0L, 0x200000000L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[183];
static private final int[] jjstateSet = new int[366];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public JavaTokenManager(JavaCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public JavaTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 183; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
      my_chars += curChar;
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 9)
       {
          jjmatchedKind = 9;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 9)
       {
          jjmatchedKind = 9;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           //System.out.println("MyChars: "+my_chars);
           if(my_chars.startsWith("DATOTEKA"))
           {
               //System.out.println("DATOTEKA JE: "+my_chars);
               Java.toPrint(my_chars);
               ispis_naziva_datoteke = true;
           }
           else if(ispis_naziva_datoteke)
               Java.toPrint(my_chars);
           
           if(my_chars.contains("."))
                   ispis_naziva_datoteke = false;
           
           //System.out.println();
           //Java.toPrint("DATOTEKA JE:"+my_chars);
           my_chars = "";
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 6 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.lineNo++;
    Java.seenNewLine = true;
         break;
      case 7 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.lineNo++;
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.lineNo++;
    if (Java.seenNewLine)
      Java.printLineNumber = true;
    Java.seenNewLine = true;
         break;
      case 3 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[3]);
         else
            image.append(jjstrLiteralImages[3]);
    Java.toPrint("<SINGLE_LINE_COMMENT>");
    Java.printLineNumber = true;
         break;
      case 4 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[4]);
         else
            image.append(jjstrLiteralImages[4]);
    Java.toPrint("<MULTI_LINE_COMMENT>");
    Java.printLineNumber = true;
         break;
      case 5 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    input_stream.backup(1);
    Java.toPrint("<FORMAL_COMMENT>");
    Java.printLineNumber = true;
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[10]);
         else
            image.append(jjstrLiteralImages[10]);
    Java.toPrint("<RSVD>");
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[11]);
         else
            image.append(jjstrLiteralImages[11]);
    Java.toPrint("<RSVD>");
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<TYPE>");
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[13]);
         else
            image.append(jjstrLiteralImages[13]);
    Java.toPrint("<BREAK>");
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[14]);
         else
            image.append(jjstrLiteralImages[14]);
    Java.toPrint("<CASE>");
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[15]);
         else
            image.append(jjstrLiteralImages[15]);
    Java.toPrint("<CATCH>");
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[16]);
         else
            image.append(jjstrLiteralImages[16]);
    Java.toPrint("<CLASS>");
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[17]);
         else
            image.append(jjstrLiteralImages[17]);
    Java.toPrint("<BREAK>");
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[18]);
         else
            image.append(jjstrLiteralImages[18]);
    Java.toPrint("<CASE>");
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[19]);
         else
            image.append(jjstrLiteralImages[19]);
    Java.toPrint("<LOOP>");
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[20]);
         else
            image.append(jjstrLiteralImages[20]);
    Java.toPrint("<IF>");
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[21]);
         else
            image.append(jjstrLiteralImages[21]);
    Java.toPrint("<BOOL>");
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[22]);
         else
            image.append(jjstrLiteralImages[22]);
    Java.toPrint("<FINALLY>");
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[23]);
         else
            image.append(jjstrLiteralImages[23]);
    Java.toPrint("<TYPE>");
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[24]);
         else
            image.append(jjstrLiteralImages[24]);
    Java.toPrint("<LOOP>");
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[25]);
         else
            image.append(jjstrLiteralImages[25]);
    Java.toPrint("<IF>");
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[26]);
         else
            image.append(jjstrLiteralImages[26]);
    Java.toPrint("<MODIFIER>");
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[27]);
         else
            image.append(jjstrLiteralImages[27]);
    Java.toPrint("<IMPORT>");
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[28]);
         else
            image.append(jjstrLiteralImages[28]);
    Java.toPrint("==");
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[29]);
         else
            image.append(jjstrLiteralImages[29]);
    Java.toPrint("<TYPE>");
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[30]);
         else
            image.append(jjstrLiteralImages[30]);
    Java.toPrint("<MODIFIER>");
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[31]);
         else
            image.append(jjstrLiteralImages[31]);
    Java.toPrint("<NATIVE>");
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[32]);
         else
            image.append(jjstrLiteralImages[32]);
    Java.toPrint("<NEW>");
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[33]);
         else
            image.append(jjstrLiteralImages[33]);
    Java.toPrint("<NULL>");
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[34]);
         else
            image.append(jjstrLiteralImages[34]);
    Java.toPrint("<PACKAGE>");
         break;
      case 35 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[35]);
         else
            image.append(jjstrLiteralImages[35]);
    Java.toPrint("<RETURN>");
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[36]);
         else
            image.append(jjstrLiteralImages[36]);
    Java.toPrint("<TYPE>");
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[37]);
         else
            image.append(jjstrLiteralImages[37]);
    Java.toPrint("<SUPER>");
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[38]);
         else
            image.append(jjstrLiteralImages[38]);
    Java.toPrint("<CASE>");
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[39]);
         else
            image.append(jjstrLiteralImages[39]);
    Java.toPrint("");
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[40]);
         else
            image.append(jjstrLiteralImages[40]);
    Java.toPrint("<TRY>");
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[41]);
         else
            image.append(jjstrLiteralImages[41]);
    Java.toPrint("<BOOL>");
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[42]);
         else
            image.append(jjstrLiteralImages[42]);
    Java.toPrint("<TRY>");
         break;
      case 43 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[43]);
         else
            image.append(jjstrLiteralImages[43]);
    Java.toPrint("<LOOP>");
         break;
      case 44 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[44]);
         else
            image.append(jjstrLiteralImages[44]);
    Java.toPrint("<ASSERT>");
         break;
      case 45 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<MODIFIER>");
         break;
      case 46 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<IDT>");
         break;
      case 49 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<VALUE>");
         break;
      case 53 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<VALUE>");
         break;
      case 55 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<VALUE>");
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<VALUE>");
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[57]);
         else
            image.append(jjstrLiteralImages[57]);
    Java.toPrint("(");
         break;
      case 58 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[58]);
         else
            image.append(jjstrLiteralImages[58]);
    Java.toPrint(")");
         break;
      case 59 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[59]);
         else
            image.append(jjstrLiteralImages[59]);
    Java.toPrint("{");
         break;
      case 60 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[60]);
         else
            image.append(jjstrLiteralImages[60]);
    Java.toPrint("}");
         break;
      case 61 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[61]);
         else
            image.append(jjstrLiteralImages[61]);
    Java.toPrint("[");
         break;
      case 62 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[62]);
         else
            image.append(jjstrLiteralImages[62]);
    Java.toPrint("]");
         break;
      case 63 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[63]);
         else
            image.append(jjstrLiteralImages[63]);
    Java.toPrint("");
         break;
      case 64 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[64]);
         else
            image.append(jjstrLiteralImages[64]);
    Java.toPrint(",");
         break;
      case 65 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[65]);
         else
            image.append(jjstrLiteralImages[65]);
    Java.toPrint(".");
         break;
      case 66 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[66]);
         else
            image.append(jjstrLiteralImages[66]);
    Java.toPrint("=");
         break;
      case 67 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[67]);
         else
            image.append(jjstrLiteralImages[67]);
    Java.toPrint("==");
         break;
      case 68 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[68]);
         else
            image.append(jjstrLiteralImages[68]);
    Java.toPrint("==");
         break;
      case 69 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[69]);
         else
            image.append(jjstrLiteralImages[69]);
    Java.toPrint("");
         break;
      case 70 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[70]);
         else
            image.append(jjstrLiteralImages[70]);
    Java.toPrint("~");
         break;
      case 71 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[71]);
         else
            image.append(jjstrLiteralImages[71]);
    Java.toPrint("?");
         break;
      case 72 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[72]);
         else
            image.append(jjstrLiteralImages[72]);
    Java.toPrint(":");
         break;
      case 73 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[73]);
         else
            image.append(jjstrLiteralImages[73]);
    Java.toPrint("==");
         break;
      case 74 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[74]);
         else
            image.append(jjstrLiteralImages[74]);
    Java.toPrint("==");
         break;
      case 75 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[75]);
         else
            image.append(jjstrLiteralImages[75]);
    Java.toPrint("==");
         break;
      case 76 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[76]);
         else
            image.append(jjstrLiteralImages[76]);
    Java.toPrint("==");
         break;
      case 77 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[77]);
         else
            image.append(jjstrLiteralImages[77]);
    Java.toPrint("&&");
         break;
      case 78 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[78]);
         else
            image.append(jjstrLiteralImages[78]);
    Java.toPrint("&&");
         break;
      case 79 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[79]);
         else
            image.append(jjstrLiteralImages[79]);
    Java.toPrint("+=<NUM>");
         break;
      case 80 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[80]);
         else
            image.append(jjstrLiteralImages[80]);
    Java.toPrint("-=<NUM>");
         break;
      case 81 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[81]);
         else
            image.append(jjstrLiteralImages[81]);
    Java.toPrint("+");
         break;
      case 82 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[82]);
         else
            image.append(jjstrLiteralImages[82]);
    Java.toPrint("-");
         break;
      case 83 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[83]);
         else
            image.append(jjstrLiteralImages[83]);
    Java.toPrint("*");
         break;
      case 84 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[84]);
         else
            image.append(jjstrLiteralImages[84]);
    Java.toPrint("/");
         break;
      case 85 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[85]);
         else
            image.append(jjstrLiteralImages[85]);
    Java.toPrint("&");
         break;
      case 86 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[86]);
         else
            image.append(jjstrLiteralImages[86]);
    Java.toPrint("&");
         break;
      case 87 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[87]);
         else
            image.append(jjstrLiteralImages[87]);
    Java.toPrint("&");
         break;
      case 88 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[88]);
         else
            image.append(jjstrLiteralImages[88]);
    Java.toPrint("%");
         break;
      case 89 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<<");
         break;
      case 90 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[90]);
         else
            image.append(jjstrLiteralImages[90]);
    Java.toPrint("+=");
         break;
      case 91 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[91]);
         else
            image.append(jjstrLiteralImages[91]);
    Java.toPrint("-=");
         break;
      case 92 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[92]);
         else
            image.append(jjstrLiteralImages[92]);
    Java.toPrint("*=");
         break;
      case 93 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[93]);
         else
            image.append(jjstrLiteralImages[93]);
    Java.toPrint("/=");
         break;
      case 94 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("&=");
         break;
      case 95 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[95]);
         else
            image.append(jjstrLiteralImages[95]);
    Java.toPrint("%=");
         break;
      case 96 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    Java.toPrint("<<=");
         break;
      default : 
         break;
   }
}
}
