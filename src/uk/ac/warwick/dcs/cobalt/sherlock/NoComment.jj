/*
 * Copyright ï¿½ 1999-2000 The University of Warwick. All Rights Reserved.
 */

/**
 * JavaCC source for a Java/C++ comment remover - the outputted file
 * contains 'NoComment's!
 *
 * @author Ben Hart
 * @author Mike Joy
 * @version 12 July 2000
 */

options {
  IGNORE_CASE=true;
  //STATIC=false;
}

PARSER_BEGIN(NoComment)

package uk.ac.warwick.dcs.cobalt.sherlock;

import java.io.*;
import java.util.Date;

/**
 * Class to remove all comments from Java files - leaving everything else.
 */
class NoComment {

  /**
   * The stream used to save the output file.
   */
  static PrintStream save;

  /**
   * The new file containing the output of this tokeniser.
   */
  static File outputFile = null;

  /**
   * Keep track of the line number from the file read in. Used to print #line xxx in the outputFile.
   */
  static int lineNo = 1;
      
  /**
   * If true, then the line number is printed having just skipped printing a comment.
   * If false, then the last line printed was not a comment, so don't print the line number.
   */
  static boolean justSeenComment = false;


  /**
   * Reinitialise all the variables, and get on with parsing the whatever's in the input stream.
   *
   * @param is - the input stream to parse.
   * @param f - the file to save the results of this tokeniser to.
   */
  static void ReInit(InputStream is, File f) {    
    // Don't need to reinitialise the PrintStream save, it's done for us.
    NoComment.ReInit(is);
    NoComment.outputFile = f;
    NoComment.lineNo = 1;
    NoComment.justSeenComment = false;
  } // ReInit


  /**
   * Print the current line number into the new file - if the last line printed was a comment.
   */
  static void printLineNo() {
    if (justSeenComment)
      save.println("#line " + lineNo);
  } // printLineNo

  public static void main(String args[]) throws ParseException {
    NoComment parser = new NoComment(System.in);
    parser.Input();
  }
}

PARSER_END(NoComment)

TOKEN_MGR_DECLS :
{
}

TOKEN : {
  <singleLineComment : "//"> {
    NoComment.justSeenComment = true;
  } : inSingleLineComment
}

TOKEN : {
  <anyMultiLineComment : "/*"> {
    NoComment.justSeenComment = true;
  } : inAnyMultiLineComment
}

<inSingleLineComment> SKIP : {
  < <newLine> > {
    NoComment.lineNo++;
  } : DEFAULT
}

<inAnyMultiLineComment> SKIP : {
  < <newLine> > {
    NoComment.lineNo++;
  } : inAnyMultiLineComment
|
  <endAnyMultiLineComment : "*/"> {
  } : DEFAULT
}

<inSingleLineComment, inAnyMultiLineComment> SKIP : {
  < ~[] >
}

TOKEN : {
  <newLine : "\r\n" | "\r" | "\n">
}

TOKEN : {
  <hashLine : "#line ">
}

TOKEN : {
  <number : ( ["0" - "9"] ) + >
}

TOKEN : {
  <others : ~[] >
}

void anyOldLines () : {
}
{
  <singleLineComment>
|
  <anyMultiLineComment>
|
  <hashLine><number> {
      lineNo = Integer.parseInt(NoComment.getToken(0).image);
    // The newLine after will incorrectly add 1 to the line count, so correct this in advance.
    // Must remember, the number refers to the original number of the *following* line.
    lineNo--;
    }
|
  <newLine> {
      lineNo++;
      save.println();
    }
|
  ( <others> | <number> ) {
    printLineNo();
      save.print(token.image);
      justSeenComment = false;
    }
}

void Input () : {
  try {
    if (outputFile!=null)
      NoComment.save = new PrintStream(new FileOutputStream(outputFile));
    else
      save = System.out;
  } catch (IOException e) {
      Date day = new Date(System.currentTimeMillis());
      if (outputFile != null) {
        try {
            String file = new String
                (System.getProperty("user.home") + Settings.fileSep
                 + "sherlock.log");
            BufferedWriter bw = new BufferedWriter
                (new FileWriter(file, true));
            bw.write(day + "-" + "Cannot write to: "
                     + outputFile.getAbsolutePath());
            bw.newLine();
            bw.close();
        }
        catch (IOException e2) {
            if (outputFile != null)
                System.err.println(day + "-" + "Cannot write to: "
                                   + outputFile.getAbsolutePath());
        }
      }
      else System.err.println(day + "-" + "Cannot write to System.out");
      return;
  }
}    
{
  (anyOldLines())* <EOF> {
    save.flush();
    save.close();
  }
 }
